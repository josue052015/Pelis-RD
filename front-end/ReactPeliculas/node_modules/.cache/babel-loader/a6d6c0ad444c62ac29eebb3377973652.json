{"ast":null,"code":"import _objectSpread from \"F:/Pelis-RD/front-end/ReactPeliculas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"F:/Pelis-RD/front-end/ReactPeliculas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"F:\\\\Pelis-RD\\\\front-end\\\\ReactPeliculas\\\\src\\\\peliculas\\\\utilidades\\\\Mapa.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { MapContainer, TileLayer, useMapEvent, Marker } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n  iconAnchor: [16, 37] // esto sirve par que el marcador se ponga en el lugar correcto\n\n});\nL.Marker.prototype.options.icon = DefaultIcon;\nexport default function Mapa(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(props.coordenadas),\n      _useState2 = _slicedToArray(_useState, 2),\n      coordenadas = _useState2[0],\n      setCoordenadas = _useState2[1]; //aqui lo definimos del tipo arreglo de coordenadaDTO \n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [18.509988654130634, -69.85047725132794],\n      zoom: 14,\n      style: {\n        height: props.height\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"React Pel\\xEDculas\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ClickMapa, {\n        setPunto: function setPunto(e) {\n          //set punto es una funcion del props de clickmapa\n          setCoordenadas([e]); // aqui actualizamos el estado de las coordenadas\n\n          props.manejarClickMapa(e); //aqui le pasamos las coordenadas a esta funcion del props cuando el usuario cambie de coordenadas haciendo click, eso hara que en el DTO del formulario tambien se cambiaran las coordenadas\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), coordenadas.map(function (coordenadaIndividual) {\n        return /*#__PURE__*/_jsxDEV(MostrarMarcadorUbicacion, _objectSpread({}, coordenadaIndividual), coordenadaIndividual.longitud + coordenadaIndividual.longitud, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 58\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Mapa, \"1S+MWdzAyb2XquGgtbGg130K6gI=\");\n\n_c = Mapa;\n\nfunction MostrarMarcadorUbicacion(props) {\n  return /*#__PURE__*/_jsxDEV(Marker, {\n    position: [props.latitud, props.longitud]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = MostrarMarcadorUbicacion;\n\nfunction ClickMapa(props) {\n  _s2();\n\n  useMapEvent(\"click\", function (e) {\n    props.setPunto({\n      latitud: e.latlng.lat,\n      longitud: e.latlng.lng\n    }); //aqui cuando se registre el evento click en el mapa le mandamos las coordenadas actuales como parametro a la funcion setPunto\n  });\n  return null;\n}\n\n_s2(ClickMapa, \"UJFMGIyDtKpxgOUCFJT9iLs+CFY=\", false, function () {\n  return [useMapEvent];\n});\n\n_c3 = ClickMapa;\nMapa.defaultProps = {\n  height: \"500px\"\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Mapa\");\n$RefreshReg$(_c2, \"MostrarMarcadorUbicacion\");\n$RefreshReg$(_c3, \"ClickMapa\");","map":{"version":3,"sources":["F:/Pelis-RD/front-end/ReactPeliculas/src/peliculas/utilidades/Mapa.tsx"],"names":["MapContainer","TileLayer","useMapEvent","Marker","L","icon","iconShadow","React","useState","DefaultIcon","iconUrl","shadowUrl","iconAnchor","prototype","options","Mapa","props","coordenadas","setCoordenadas","height","e","manejarClickMapa","map","coordenadaIndividual","longitud","MostrarMarcadorUbicacion","latitud","ClickMapa","setPunto","latlng","lat","lng","defaultProps"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,SAAvB,EAAkCC,WAAlC,EAA+CC,MAA/C,QAA6D,eAA7D;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAO,0BAAP;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,IAAIC,WAAW,GAAGL,CAAC,CAACC,IAAF,CAAO;AACrBK,EAAAA,OAAO,EAAEL,IADY;AAErBM,EAAAA,SAAS,EAAEL,UAFU;AAGrBM,EAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAHS,CAIrB;;AAJqB,CAAP,CAAlB;AAOAR,CAAC,CAACD,MAAF,CAASU,SAAT,CAAmBC,OAAnB,CAA2BT,IAA3B,GAAkCI,WAAlC;AAEA,eAAe,SAASM,IAAT,CAAcC,KAAd,EAAgC;AAAA;;AAAA;;AAC3C,kBAAsCR,QAAQ,CAAkBQ,KAAK,CAACC,WAAxB,CAA9C;AAAA;AAAA,MAAOA,WAAP;AAAA,MAAoBC,cAApB,iBAD2C,CACuC;;;AAElF,sBACI;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,MAAM,EAAE,CAAC,kBAAD,EAAqB,CAAC,iBAAtB,CAAtB;AAAgE,MAAA,IAAI,EAAE,EAAtE;AACI,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEH,KAAK,CAACG;AAAhB,OADX;AAAA,8BAGI,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,oBAAvB;AAAyC,QAAA,GAAG,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,cAHJ,eAQI,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AAAE;AACxBF,UAAAA,cAAc,CAAC,CAACE,CAAD,CAAD,CAAd,CADsB,CACF;;AAEpBJ,UAAAA,KAAK,CAACK,gBAAN,CAAuBD,CAAvB,EAHsB,CAGK;AAC9B;AAJD;AAAA;AAAA;AAAA;AAAA,cARJ,EAcKH,WAAW,CAACK,GAAZ,CAAgB,UAAAC,oBAAoB;AAAA,4BAAI,QAAC,wBAAD,oBACjCA,oBADiC,GAA+BA,oBAAoB,CAACC,QAArB,GAAgCD,oBAAoB,CAACC,QAApF;AAAA;AAAA;AAAA;AAAA,iBAAJ;AAAA,OAApC,CAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAuBH;;GA1BuBT,I;;KAAAA,I;;AA2BxB,SAASU,wBAAT,CAAkCT,KAAlC,EAAwD;AACpD,sBACI,QAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,CAACA,KAAK,CAACU,OAAP,EAAgBV,KAAK,CAACQ,QAAtB;AAAlB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;MAJQC,wB;;AAMT,SAASE,SAAT,CAAmBX,KAAnB,EAA0C;AAAA;;AACtCd,EAAAA,WAAW,CAAC,OAAD,EAAU,UAAAkB,CAAC,EAAI;AACtBJ,IAAAA,KAAK,CAACY,QAAN,CAAe;AAAEF,MAAAA,OAAO,EAAEN,CAAC,CAACS,MAAF,CAASC,GAApB;AAAyBN,MAAAA,QAAQ,EAAEJ,CAAC,CAACS,MAAF,CAASE;AAA5C,KAAf,EADsB,CAC4C;AACrE,GAFU,CAAX;AAIA,SAAO,IAAP;AACH;;IANQJ,S;UACLzB,W;;;MADKyB,S;AAoBTZ,IAAI,CAACiB,YAAL,GAAoB;AAChBb,EAAAA,MAAM,EAAE;AADQ,CAApB","sourcesContent":["import { MapContainer, TileLayer, useMapEvent, Marker } from \"react-leaflet\"\r\nimport L from \"leaflet\"\r\nimport icon from \"leaflet/dist/images/marker-icon.png\"\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\"\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport { coordenadaDTO } from \"./coordenada.model\"\r\nimport React, { useState } from \"react\"\r\n\r\n\r\nlet DefaultIcon = L.icon({\r\n    iconUrl: icon,\r\n    shadowUrl: iconShadow,\r\n    iconAnchor: [16, 37]\r\n    // esto sirve par que el marcador se ponga en el lugar correcto\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nexport default function Mapa(props: mapaProps) {\r\n    const [coordenadas, setCoordenadas] = useState<coordenadaDTO[]>(props.coordenadas)//aqui lo definimos del tipo arreglo de coordenadaDTO \r\n\r\n    return (\r\n        <>\r\n            <MapContainer center={[18.509988654130634, -69.85047725132794]} zoom={14}\r\n                style={{ height: props.height }}\r\n            >\r\n                <TileLayer attribution=\"React PelÃ­culas\" url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n\r\n                {/* vamos a invocar a click mapa para mostrar la nueva ubicacion en el UI, Basicamente esto de aqui abajo actualiza el valor del DTO con las coordenadas actuales y luego muestra el marcador en esa posicion*/}\r\n\r\n\r\n                <ClickMapa setPunto={e => { //set punto es una funcion del props de clickmapa\r\n                    setCoordenadas([e]) // aqui actualizamos el estado de las coordenadas\r\n\r\n                    props.manejarClickMapa(e); //aqui le pasamos las coordenadas a esta funcion del props cuando el usuario cambie de coordenadas haciendo click, eso hara que en el DTO del formulario tambien se cambiaran las coordenadas\r\n                }} />\r\n\r\n                {coordenadas.map(coordenadaIndividual => <MostrarMarcadorUbicacion key={coordenadaIndividual.longitud + coordenadaIndividual.longitud}\r\n                    {...coordenadaIndividual} // destructuramos el valor de ese arreglo para indicarle la posicion que sera el elemento individual de ese arreglo, pero destructurado\r\n                />)}\r\n\r\n            </MapContainer>\r\n        </>\r\n    )\r\n}\r\nfunction MostrarMarcadorUbicacion(props: coordenadaDTO) {\r\n    return (\r\n        <Marker position={[props.latitud, props.longitud]} />\r\n    )\r\n}\r\n\r\nfunction ClickMapa(props: clickMapaProps) {\r\n    useMapEvent(\"click\", e => {\r\n        props.setPunto({ latitud: e.latlng.lat, longitud: e.latlng.lng }) //aqui cuando se registre el evento click en el mapa le mandamos las coordenadas actuales como parametro a la funcion setPunto\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\ninterface clickMapaProps {\r\n    setPunto(coordenadas: coordenadaDTO): void;\r\n}\r\n\r\n/*-----------------PROPS DEL COMPONENTE-------------------------*/\r\n\r\ninterface mapaProps {\r\n    height: string;\r\n    coordenadas: coordenadaDTO[];\r\n    manejarClickMapa(coordenadas: coordenadaDTO): void;\r\n}\r\n\r\nMapa.defaultProps = {\r\n    height: \"500px\"\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}