{"ast":null,"code":"import _toConsumableArray from \"F:/Pelis-RD/front-end/ReactPeliculas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"F:/Pelis-RD/front-end/ReactPeliculas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"F:\\\\Pelis-RD\\\\front-end\\\\ReactPeliculas\\\\src\\\\actores\\\\TypeAheadActores.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TypeAheadActores(props) {\n  _s();\n\n  var _this = this;\n\n  var opcionActor = [{\n    id: 1,\n    nombre: \"Calvo de brazzers\",\n    personaje: \"\",\n    foto: \"http://pm1.narvii.com/6120/9cd70762280f430ded8158c06c287e82b84d0101_00.jpg\"\n  }, {\n    id: 2,\n    nombre: \"Keanu Reeves\",\n    personaje: \"\",\n    foto: \"https://m.media-amazon.com/images/M/MV5BYTkzODI4MDMtNDNmZC00NDZlLWFmNTktNDRhOWE2YzhlZTQ2XkEyXkFqcGdeQXVyMTE1MTYxNDAw._V1_UY317_CR19,0,214,317_AL_.jpg\"\n  }, {\n    id: 3,\n    nombre: \"Camilo Perez\",\n    personaje: \"\",\n    foto: \"https://m.media-amazon.com/images/M/MV5BMTc0NjczNDc1MV5BMl5BanBnXkFtZTYwMDU0Mjg1._V1_UX214_CR0,0,214,317_AL_.jpg\"\n  }];\n  var seleccionado = [];\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      elementoArrastrado = _useState2[0],\n      setElementoArrastrado = _useState2[1];\n\n  function manejarDragStart(actor) {\n    setElementoArrastrado(actor);\n  }\n\n  function manejarDragOver(actor) {\n    if (!elementoArrastrado) {\n      //esto lo que hace es que si no tenemos ningun elemento que no retorne nada para que no de error\n      return;\n    }\n\n    if (actor.id !== elementoArrastrado.id) {\n      //para reorganizar la lista al arrastrar el elemento tenemos que hacer una combinacion entre el elemento arrastrado y los demas\n      //y para eso le sacamos el indice a cada uno\n      var elementoArrastradoIndice = props.actores.findIndex(function (x) {\n        return x.id === elementoArrastrado.id;\n      });\n      var otrosElementosIndice = props.actores.findIndex(function (x) {\n        return x.id === actor.id;\n      }); //ahora haremos el intercambio\n\n      var actoresArreglo = _toConsumableArray(props.actores); //aqui estamos almacenando todos los elementos\n      //aqui le decimos que donde estaba el otro elemento que ponga al elemento arrastrado\n\n\n      actoresArreglo[otrosElementosIndice] = elementoArrastrado;\n      actoresArreglo[elementoArrastradoIndice] = actor;\n      /*  imaginemos que tenemos: \r\n       arreglo[0] = pedro \r\n       arreglo [1] = juan \r\n         con los indices le estamos diciendo que ponga a juan en el indice de pedro y a pedro en el indice donde estaba juan\r\n       y seria\r\n       arreglo[0]= juan\r\n       arreglo[1] = pedro */\n\n      props.onAdd(actoresArreglo);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Actores\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typeahead, {\n      id: \"typeahead\",\n      onChange: function onChange(actores) {\n        if (props.actores.findIndex(function (x) {\n          return x.id === actores[0].id;\n        }) === -1) {\n          //este if para evaluar si no se encuentra seleccionado aun \n          props.onAdd([].concat(_toConsumableArray(props.actores), [actores[0]])); //aqui estamos juntando los actores seleccionados con lo que ya estan\n        }\n      },\n      options: opcionActor // esto es para llenar el typeahead\n      ,\n      labelKey: function labelKey(actor) {\n        return actor.nombre;\n      } //este es el valor que queremos utilizar para mostrar\n      ,\n      filterBy: [\"nombre\"],\n      placeholder: \"Escriba el nombre del actor...\",\n      minLength: 1 //es la longitud minima que hay que escribir para que aparezca\n      ,\n      flip: true //esto es para que la lista se coloque arriba\n      ,\n      selected: seleccionado,\n      renderMenuItemChildren: function renderMenuItemChildren(e) {\n        return (\n          /*#__PURE__*/\n          //esto es para modificar lo que va a aparecer en la lista de recomendaciones\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: e.foto,\n              alt: \"imagen actor\",\n              style: {\n                height: \"64px\",\n                marginRight: \"10px\",\n                width: \"64px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 25\n            }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", e.nombre, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, _this)]\n          }, void 0, true)\n        );\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: props.actores.map(function (actor) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          draggable: true //esto hace que los elementos del listado sean arrastrables\n          ,\n          onDragStart: function onDragStart() {\n            return manejarDragStart(actor);\n          } //es cuando empecemos a arrastrar un elemento\n          ,\n          onDragOver: function onDragOver() {\n            return manejarDragOver(actor);\n          } //es cuando le pasemos por encima a un elemento mientras arrastremos\n          ,\n          className: \"list-group-item list-group-item-action\",\n          children: [props.listadoUI(actor), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge badge-primary badge-pill pointer\",\n            style: {\n              marginLeft: \"0.5rem\"\n            },\n            onClick: function onClick() {\n              return props.onRemove(actor);\n            },\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, _this)]\n        }, actor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 45\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TypeAheadActores, \"m5IMuQqgvHQDXgITtdXZOLUuir8=\");\n\n_c = TypeAheadActores;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeAheadActores\");","map":{"version":3,"sources":["F:/Pelis-RD/front-end/ReactPeliculas/src/actores/TypeAheadActores.tsx"],"names":["useState","Typeahead","TypeAheadActores","props","opcionActor","id","nombre","personaje","foto","seleccionado","undefined","elementoArrastrado","setElementoArrastrado","manejarDragStart","actor","manejarDragOver","elementoArrastradoIndice","actores","findIndex","x","otrosElementosIndice","actoresArreglo","onAdd","e","height","marginRight","width","map","listadoUI","marginLeft","onRemove"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport { ReactElement } from \"react-markdown\";\r\nimport { actorPeliculaDTO } from \"./actores.model\";\r\n\r\nexport default function TypeAheadActores(props: typeAheadActoresProps) {\r\n    const opcionActor: actorPeliculaDTO[] = [{\r\n        id: 1, nombre: \"Calvo de brazzers\", personaje: \"\", foto: \"http://pm1.narvii.com/6120/9cd70762280f430ded8158c06c287e82b84d0101_00.jpg\"\r\n    },\r\n    {\r\n        id: 2, nombre: \"Keanu Reeves\", personaje: \"\", foto: \"https://m.media-amazon.com/images/M/MV5BYTkzODI4MDMtNDNmZC00NDZlLWFmNTktNDRhOWE2YzhlZTQ2XkEyXkFqcGdeQXVyMTE1MTYxNDAw._V1_UY317_CR19,0,214,317_AL_.jpg\"\r\n    },\r\n\r\n    {\r\n        id: 3, nombre: \"Camilo Perez\", personaje: \"\", foto: \"https://m.media-amazon.com/images/M/MV5BMTc0NjczNDc1MV5BMl5BanBnXkFtZTYwMDU0Mjg1._V1_UX214_CR0,0,214,317_AL_.jpg\"\r\n    }\r\n    ]\r\n\r\n    const seleccionado: actorPeliculaDTO[] = []\r\n\r\n    const [elementoArrastrado, setElementoArrastrado] = useState<actorPeliculaDTO | undefined>(undefined);\r\n\r\n    function manejarDragStart(actor: actorPeliculaDTO) {\r\n        setElementoArrastrado(actor);\r\n    }\r\n\r\n    function manejarDragOver(actor: actorPeliculaDTO) {\r\n        if (!elementoArrastrado) { //esto lo que hace es que si no tenemos ningun elemento que no retorne nada para que no de error\r\n            return;\r\n        }\r\n\r\n        if (actor.id !== elementoArrastrado.id){\r\n            //para reorganizar la lista al arrastrar el elemento tenemos que hacer una combinacion entre el elemento arrastrado y los demas\r\n            //y para eso le sacamos el indice a cada uno\r\n            const elementoArrastradoIndice = props.actores.findIndex(x => x.id === elementoArrastrado.id);\r\n            const otrosElementosIndice = props.actores.findIndex (x => x.id === actor.id );\r\n            //ahora haremos el intercambio\r\n            const actoresArreglo = [...props.actores]; //aqui estamos almacenando todos los elementos\r\n            //aqui le decimos que donde estaba el otro elemento que ponga al elemento arrastrado\r\n            actoresArreglo [otrosElementosIndice] = elementoArrastrado;\r\n            actoresArreglo[elementoArrastradoIndice] = actor;\r\n           /*  imaginemos que tenemos: \r\n            arreglo[0] = pedro \r\n            arreglo [1] = juan \r\n\r\n            con los indices le estamos diciendo que ponga a juan en el indice de pedro y a pedro en el indice donde estaba juan\r\n            y seria\r\n            arreglo[0]= juan\r\n            arreglo[1] = pedro */\r\n            props.onAdd(actoresArreglo);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <label>Actores</label>\r\n            <Typeahead\r\n                id=\"typeahead\"\r\n                onChange={actores => {\r\n\r\n                    if (props.actores.findIndex(x => x.id === actores[0].id) === -1) {\r\n                        //este if para evaluar si no se encuentra seleccionado aun \r\n                        props.onAdd([...props.actores, actores[0]]);\r\n\r\n                        //aqui estamos juntando los actores seleccionados con lo que ya estan\r\n                    }\r\n\r\n\r\n                }}\r\n                options={opcionActor} // esto es para llenar el typeahead\r\n                labelKey={actor => actor.nombre} //este es el valor que queremos utilizar para mostrar\r\n                filterBy={[\"nombre\"]}\r\n                placeholder=\"Escriba el nombre del actor...\"\r\n                minLength={1}//es la longitud minima que hay que escribir para que aparezca\r\n                flip={true} //esto es para que la lista se coloque arriba\r\n                selected={seleccionado}\r\n                renderMenuItemChildren={e => ( //esto es para modificar lo que va a aparecer en la lista de recomendaciones\r\n                    <>\r\n                        <img src={e.foto} alt=\"imagen actor\"\r\n                            style={{ height: \"64px\", marginRight: \"10px\", width: \"64px\" }}\r\n                        />\r\n                        <span> {e.nombre} </span>\r\n                    </>\r\n                )}\r\n            />\r\n            <ul className=\"list-group\">\r\n                {props.actores.map(actor => <li\r\n                    draggable={true} //esto hace que los elementos del listado sean arrastrables\r\n                    onDragStart={() => manejarDragStart(actor)} //es cuando empecemos a arrastrar un elemento\r\n                    onDragOver={() => manejarDragOver(actor)} //es cuando le pasemos por encima a un elemento mientras arrastremos\r\n                    key={actor.id} className=\"list-group-item list-group-item-action\"\r\n                >\r\n                    {props.listadoUI(actor)}\r\n                    <span className=\"badge badge-primary badge-pill pointer\"\r\n                        style={{ marginLeft: \"0.5rem\" }}\r\n                        onClick={() => props.onRemove(actor)}\r\n                    >\r\n                        X\r\n                    </span>\r\n                </li>)}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface typeAheadActoresProps {\r\n    actores: actorPeliculaDTO[];\r\n    onAdd(actores: actorPeliculaDTO[]): void; //esto lo hacemos para atravez del props modificar el lo que contiene el dto\r\n    listadoUI(actor: actorPeliculaDTO): ReactElement; //esto lo hacemos para que el ui de la lista venga como un parametro\r\n    onRemove(actor: actorPeliculaDTO): void;\r\n}"]},"metadata":{},"sourceType":"module"}