{"ast":null,"code":"import _slicedToArray from \"F:/Pelis-RD/front-end/ReactPeliculas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"F:\\\\Pelis-RD\\\\front-end\\\\ReactPeliculas\\\\src\\\\peliculas\\\\utilidades\\\\FormularioImagen.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormikContext } from \"formik\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormularioImagen(props) {\n  _s();\n\n  var divStyle = {\n    marginTop: \"10px\"\n  };\n  var imgStyle = {\n    width: \"450px\"\n  };\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      imagenBase64 = _useState2[0],\n      setImagenBase64 = _useState2[1];\n\n  var _useState3 = useState(props.imagenURL),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cambioImagen = _useState4[0],\n      setCambioImagen = _useState4[1];\n\n  var _useFormikContext = useFormikContext(),\n      values = _useFormikContext.values;\n\n  var aBase64 = function aBase64(file) {\n    // esta funcion nos convierte un archivo a base64, y tuvimos que crear una promesa porque es una operacion asincrona, es decir que talvez se tarde porque va a solicitar datos al servidor\n    return new Promise(function (resolve, reject) {\n      //lo que retorna la promesa es la representacion a base64 y resolve es cuando tenemos exito y reject es cuando tenemos un error\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = function () {\n        return resolve(reader.result);\n      }; // esto es cuando deje de leer el archivo\n\n\n      reader.onerror = function (error) {\n        return reject(error);\n      }; // esto es si hay un error\n\n    });\n  };\n\n  var imagenOnChange = function imagenOnChange(e) {\n    if (e.currentTarget.files) {\n      var archivo = e.currentTarget.files[0]; //guardamos el archivo en esta variable\n\n      aBase64(archivo) //convertimos ese archivo a base64\n      .then(function (representacionBase64) {\n        return setImagenBase64(representacionBase64);\n      }) // lo que hace esto es que usa el estado en el parametro de la funcion el cual contiene el dato de la variable que almacena la imagen convertida a base64  //aqui tuvimos que utilizar estado porque queremos que la imagen seleccionada se le muestre al usuario y queremos cambiar el valor de esa variable y que se muestre en tiempo real\n      .catch(function (error) {\n        return console.error(error);\n      });\n      values[props.campo] = archivo; //values es el contexto de formik que usamos para pasar datos entre componentes de formik\n\n      setCambioImagen(\"\"); //aqui decimos que cuando se seleccione la nueva imagen la otra url de la imagen por defecto pasara a ser un string vacio\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".jpg,.jpeg,.png\",\n          onChange: imagenOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), imagenBase64 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: divStyle,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: imgStyle,\n            src: imagenBase64,\n            alt: \"imagen seleccionada\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this) : null, cambioImagen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: divStyle,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: imgStyle,\n            src: cambioImagen,\n            alt: \"imagen seleccionada\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(FormularioImagen, \"1jEh0YXAqP8+cFBu2UUImF3Zd3g=\", false, function () {\n  return [useFormikContext];\n});\n\n_c = FormularioImagen;\nFormularioImagen.defaultProps = {\n  imagenURL: \"\"\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FormularioImagen\");","map":{"version":3,"sources":["F:/Pelis-RD/front-end/ReactPeliculas/src/peliculas/utilidades/FormularioImagen.tsx"],"names":["useFormikContext","useState","FormularioImagen","props","divStyle","marginTop","imgStyle","width","imagenBase64","setImagenBase64","imagenURL","cambioImagen","setCambioImagen","values","aBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","imagenOnChange","e","currentTarget","files","archivo","then","representacionBase64","catch","console","campo","label","defaultProps"],"mappings":"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","sourcesContent":["\r\nimport { useFormikContext } from \"formik\";\r\nimport { ChangeEvent, useState } from \"react\"\r\n\r\nexport default function FormularioImagen(props: formularioImagenProps) {\r\n\r\n    const divStyle = { marginTop: \"10px\" }\r\n    const imgStyle = { width: \"450px\" }\r\n\r\n    const [imagenBase64, setImagenBase64] = useState(\"\");\r\n    const [cambioImagen, setCambioImagen] = useState(props.imagenURL);\r\n\r\n    const { values } = useFormikContext<any>();\r\n\r\n    const aBase64 = (file: File) => { // esta funcion nos convierte un archivo a base64, y tuvimos que crear una promesa porque es una operacion asincrona, es decir que talvez se tarde porque va a solicitar datos al servidor\r\n        return new Promise<string>((resolve, reject) => { //lo que retorna la promesa es la representacion a base64 y resolve es cuando tenemos exito y reject es cuando tenemos un error\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result as string); // esto es cuando deje de leer el archivo\r\n            reader.onerror = (error) => reject(error); // esto es si hay un error\r\n        })\r\n    }\r\n\r\n    const imagenOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files) {\r\n            const archivo = e.currentTarget.files[0]; //guardamos el archivo en esta variable\r\n            aBase64(archivo) //convertimos ese archivo a base64\r\n                .then((representacionBase64: string) => setImagenBase64(representacionBase64))// lo que hace esto es que usa el estado en el parametro de la funcion el cual contiene el dato de la variable que almacena la imagen convertida a base64  //aqui tuvimos que utilizar estado porque queremos que la imagen seleccionada se le muestre al usuario y queremos cambiar el valor de esa variable y que se muestre en tiempo real\r\n                .catch(error => console.error(error))\r\n\r\n            values[props.campo] = archivo; //values es el contexto de formik que usamos para pasar datos entre componentes de formik\r\n            setCambioImagen(\"\"); //aqui decimos que cuando se seleccione la nueva imagen la otra url de la imagen por defecto pasara a ser un string vacio\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form-group\">\r\n                <label>{props.label}</label>\r\n                <div>\r\n                    <input type=\"file\" accept=\".jpg,.jpeg,.png\" onChange={imagenOnChange} />\r\n                </div>\r\n                {imagenBase64 ?\r\n                    <div>\r\n                        <div style={divStyle}>\r\n                            <img style={imgStyle} src={imagenBase64} alt=\"imagen seleccionada\" />\r\n                        </div>\r\n                    </div> : null\r\n                }\r\n                {/*  ahora tenemos que crear un estado para cuando se cambie la imagen se quite la que estaba por default */}\r\n\r\n                {cambioImagen ?\r\n                    <div>\r\n                        <div style={divStyle}>\r\n                            <img style={imgStyle} src={cambioImagen} alt=\"imagen seleccionada\" />\r\n                        </div>\r\n                    </div> : null\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface formularioImagenProps {\r\n    campo: string;\r\n    label: string;\r\n    imagenURL: string;\r\n}\r\n\r\nFormularioImagen.defaultProps = {\r\n    imagenURL: \"\"\r\n}"]},"metadata":{},"sourceType":"module"}